akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  cluster {
    seed-node-timeout = 5s
  }
}

akkeeper {

  master {
    # The heartbeats are used when the Akkeeper application must be terminated
    # automatically in case when some external watchdog crashes or terminates.
    heartbeat {
      # Indicates whether to enable heartbeats.
      enabled = false

      # A heartbeat that hasn't been delivered within this timeout is considered "missed".
      timeout = 36s

      # The limit for a number of missed heartbeats after reaching which the Akkeeper application
      # automatically terminates.
      missed-limit = 3
    }

    # The timeout after which the Akkeeper Master gives up to wait for a list of active instances
    # and terminates with an error. This property is only used during the Akkeeper Master initialization
    # process.
    instance-list-timeout = 30s
  }

  monitoring {
    # The timeout after which an instance that hasn't been transitioned from the
    # launching state is considered dead.
    launch-timeout = 90s

    # The interval between instance list refreshment attempts. Used only when
    # the Akkeeper Master is rejoining the existing cluster.
    instance-list-refresh-interval = 45s
  }

  akka {

    # The Akka remote port for the Akkeeper Master instance.
    port = 0

    # The Akka System name.
    system-name = "AkkeeperSystem"

    # The number of seed nodes that should be used by the Akkeeper Master to
    # join the existing cluster.
    seed-nodes-num = 3

    # The timeout after which a node gives up its attempt to join a cluster.
    # On a master instance reaching this timeout means that the restarted master will start
    # a new cluster.
    join-cluster-timeout = 120s

    # Indicates whether Akkeeper Master and container instances should constitute an Akka Cluster.
    # Note: some features might not be supported when Akka Cluster is not enabled, while others
    # may perform less efficiently and/or create an extra load on third-party services like ZooKeeper.
    # Modify this value with caution.
    use-akka-cluster = true
  }

  api {
    rest {

      # The REST API port.
      port = 5050

      # The maximum number of attempts to bind to a next available port.
      port-max-attempts = 8

      # The client request timeout for the REST API.
      request-timeout = 30s
    }
  }

  yarn {

    # The YARN application name.
    application-name = "AkkeeperApplication"

    master {
      # The number of CPU cores that will be allocated for the
      # Akkeeper Application Master container.
      cpus = 1

      # The amount of RAM in MB that will be allocated for the
      # Akkeeper Application Master cotnainer.
      memory = 2048

      # The list of JVM arguments and flags that will be used
      # to launch the Akkeeper Application Master instance.
      jvm.args = ["-Xmx2g"]
    }

    # The maximum number of attempts for the Akkeeper applciation on YARN.
    max-attempts = 2

    # The number of threads that are used for communication with YARN RM and NM.
    client-threads = 5
  }

  kerberos {

    # Kerberos ticket check/update interval.
    ticket-check-interval = 60s
  }

  zookeeper {

    # The comma-separated list of ZK servers.
    servers = ""

    # The initial amount of time to wait between retries.
    connection-interval-ms = 500

    # The maximum number of times to retry.
    max-retries = 8

    # The root ZK namespace for the Akkeeper application.
    namespace = "akkeeper"

    # If true, allow ZooKeeper client to enter read only mode in case
    # of a network partition.
    can-be-readonly = true

    # The number of ZK client threads.
    client-threads = 5
  }
}
